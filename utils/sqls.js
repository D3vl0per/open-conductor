module.exports = {
	queryCreateTeam: 'INSERT INTO "teams" (name) VALUES ($1) RETURNING id',
	queryCheckTeamIsExistByName: 'SELECT EXISTS (SELECT name FROM teams WHERE name = $1)',
	queryCheckTeamIsExistById: 'SELECT EXISTS (SELECT id FROM teams WHERE id = $1)',
	queryGetTeams: 'SELECT id,name FROM teams',
	queryGetTeamIdByName: 'SELECT id FROM teams WHERE name = $1',
	queryGetTeamById: 'SELECT name FROM teams WHERE id = $1',
	queryGetTeammatesByUserId: 'SELECT userid FROM users WHERE team = (SELECT team FROM users WHERE userid = $1)',
	queryCreateNewUser: 'INSERT INTO "users" (team, firstname, lastname, email) VALUES ($1,$2,$3,$4) RETURNING team, code',
	queryCreateTrio: 'INSERT INTO "users" (team, firstname, lastname, email) VALUES ($1,$2,$3,$4),($5,$6,$7,$8),($9,$10,$11,$12) RETURNING id,firstname,lastname,email,team,code',
	queryDeleteTeam: 'DELETE FROM teams WHERE name = $1',
	queryDeleteUserByEmail: 'DELETE FROM users WHERE email = $1',
	queryDeleteUserByUserId: 'DELETE FROM users WHERE userid = $1',
	queryCheckAuthToken: 'SELECT EXISTS (SELECT true FROM users WHERE team = $1 AND code = $2 AND joined = False AND userid IS NULL)',
	queryInvalidateAuthToken: 'UPDATE users SET (joined, username, userid) = (True, $1,$2) WHERE team = $3 AND code = $4 AND joined = False AND userid IS NULL RETURNING firstname, lastname',
	queryGetUserInfo: 'SELECT id,firstname,lastname,email,username,team,joined,supportban,timestamp FROM users WHERE userid = $1',
	queryGetUserIsExist: 'SELECT EXISTS (SELECT id FROM users WHERE userid = $1)',
	queryGetUserIdById: 'SELECT userid FROM users WHERE id = $1',
	querySupportBan: 'UPDATE users SET supportban = True WHERE userid = $1',
	querySupportUnban: 'UPDATE users SET supportban = False WHERE userid = $1',
	queryCheckSupportBan: 'SELECT supportban, id, userid FROM users WHERE userid = $1',
	queryCheckUsersTicketIsOpen: 'SELECT EXISTS(SELECT open FROM tickets WHERE opener = $1 AND open = true LIMIT 1);',
	queryNewTicket: 'INSERT INTO "tickets" (opener, problem) VALUES ($1,$2) RETURNING id',
	queryCloseTicketSuccesfull: 'UPDATE tickets SET (open, solved) = (False, True) WHERE id = $1',
	queryCloseTicketFail: 'UPDATE tickets SET (open, solved) = (False, False) WHERE id = $1',
	queryLockSupport: 'UPDATE configs SET state = False WHERE name = \'support\'',
	queryUnlockSupport: 'UPDATE configs SET state = True WHERE name = \'support\'',
	queryCheckSupportLock: 'SELECT state FROM configs WHERE name = \'support\'',
	queryLockAuth: 'UPDATE configs SET state = False WHERE name = \'auth\'',
	queryUnlockAuth: 'UPDATE configs SET state = True WHERE name = \'auth\'',
	queryCheckAuthLock: 'SELECT state FROM configs WHERE name = \'auth\'',
	queryWarnTeam: 'SELECT userid FROM users WHERE team = (SELECT team FROM users WHERE userid = $1)',
	queryGetTeamNameByUserId: 'SELECT name, id FROM teams WHERE id = (SELECT team FROM users WHERE userid = $1)',
	queryLogging: 'INSERT INTO "logs" (username, userid, command, subcommand, parameters) VALUES ($1,$2,$3,$4,$5)',
	queryGetTicketsDetailsByTicketId: 'SELECT id, opener, problem, solved, timestamp, slot FROM tickets WHERE id = $1',
	queryGetTicketDetailsByUserId: 'SELECT * FROM tickets WHERE opener = (SELECT id FROM users WHERE userid = $1) AND open = true',
	queryTicketIsExistById: 'SELECT EXISTS(SELECT id FROM tickets WHERE id = $1)',
	querySaveSupportSlotSetting: 'UPDATE tickets SET slot = $1 WHERE id = $2',
	queryStat: 'SELECT (SELECT COUNT(*) FROM teams t) as num_teams, (SELECT COUNT(*) FROM users u1) as num_users',
	queryNewSubmission: 'INSERT INTO "submissions" (team, userid, submission) VALUES ($1, $2, $3) RETURNING id',
	queryCheckFlag: 'SELECT id, score FROM flags WHERE flag = $1',
	queryAddScore: 'INSERT INTO "scores" (team, submission, flag) VALUES ($1,$2,$3)',
	queryCheckDuplicateFlag: 'SELECT EXISTS (SELECT * FROM scores WHERE team = $1 AND flag = $2)',
	queryCalculateScoreStatByTeamId: 'SELECT SUM(score) FROM flags WHERE id IN(SELECT flag FROM scores WHERE team = $1)',
	queryCalculateAllScore: 'SELECT teams.id, teams.name, COUNT(flags.id) AS num_flags, SUM(flags.score) AS total_flag_score, MAX(scores.timestamp) AS last_timestamp FROM teams LEFT JOIN scores ON scores.team = teams.id LEFT JOIN flags ON scores.flag = flags.id GROUP BY teams.id, teams.name ORDER BY total_flag_score DESC, last_timestamp ASC',
	queryEditTeamName: 'UPDATE "teams" SET name = $1 WHERE name = $2',
	queryEditAuthCode: 'UPDATE "users" SET code = gen_random_uuid() WHERE email = $1 RETURNING code',
	queryCheckUserByEmail: 'SELECT EXISTS (SELECT id FROM users WHERE email = $1)',
};

